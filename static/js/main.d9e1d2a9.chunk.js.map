{"version":3,"sources":["redux/actions-types.js","redux/reducers.js","redux/store.js","components/comment-add/comment-add.jsx","components/Comment-items/comment-items.jsx","components/comment-list/comment-list.jsx","containers/app/app.jsx","redux/actions.js","serviceWorker.js","index.js"],"names":["ADD_COMMENT","DELETE_COMMENT","initComments","username","content","createStore","state","action","type","data","filter","comment","index","applyMiddleware","thunk","CommentAdd","handleSubmit","props","addComment","setState","handleNameChange","event","target","value","handleContentChange","this","Col","Form","Group","controlId","Label","Control","placeholder","onChange","as","rows","ButtonToolbar","Button","onClick","Component","CommentItems","handleClick","deleteComment","window","confirm","ListGroup","Item","className","href","CommentList","comments","display","length","style","map","key","App","Jumbotron","fluid","Container","Row","propsTypes","PropTypes","array","isRequired","func","connect","Boolean","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9e1d2a9.chunk.js","sourcesContent":["/**\r\n * including all const name of types of actions\r\n */\r\n// add comments\r\nexport const ADD_COMMENT = 'add_comment'\r\n//delete comments\r\nexport const DELETE_COMMENT = 'delete_comment'\r\n\r\n","/**\r\n * including all reducer funcions ( return a new state according to the old state and action)\r\n */\r\nimport {ADD_COMMENT,DELETE_COMMENT} from './actions-types'\r\nconst initComments = [\r\n    {username: 'Tom', content: 'React is pretty good'},\r\n    {username: 'Jack', content: 'React is so easy'}\r\n]\r\n\r\n export function comments(state =initComments , action) {\r\n    switch (action.type) {\r\n        case ADD_COMMENT:\r\n            return [action.data, ...state]\r\n        case DELETE_COMMENT:\r\n            return state.filter((comment, index) => \r\n            index !== action.data)\r\n        default:\r\n            return state\r\n    }\r\n}","/**\r\n * the core of redux (store)\r\n */\r\nimport  {createStore,applyMiddleware} from 'redux'\r\nimport {comments} from './reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\n export default createStore (\r\n     comments,\r\n     applyMiddleware(thunk)\r\n )","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Form, Button, ButtonToolbar, Col } from 'react-bootstrap'\r\n\r\nclass CommentAdd extends Component {\r\n\r\n    static propTypes = {\r\n        addComment: PropTypes.func.isRequired\r\n    }\r\n\r\n    state={\r\n        username:'',\r\n        content:''\r\n    }\r\n    handleSubmit = () => {\r\n        // collect data, and sealed to comment object\r\n        const comment = this.state\r\n\r\n        //update state\r\n        this.props.addComment(comment)\r\n        //clear input data\r\n        this.setState({\r\n            username:'',\r\n            content:''\r\n        })\r\n    }\r\n    handleNameChange = (event) => {\r\n        const username = event.target.value\r\n        this.setState({username})\r\n    }\r\n    handleContentChange = (event) => {\r\n        const content = event.target.value\r\n        this.setState({content})\r\n    }\r\n    render() {\r\n        const {username,content}=this.state\r\n        return (\r\n\r\n            <Col>\r\n                <Form>\r\n                    <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Username\" value={username} \r\n                        onChange={this.handleNameChange}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label>Comment</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows=\"3\" value={content}\r\n                        onChange={this.handleContentChange}/>\r\n                    </Form.Group>\r\n                    <ButtonToolbar>\r\n                    <Button type=\"button\" onClick={this.handleSubmit} >Submit</Button>\r\n                    </ButtonToolbar>\r\n                </Form>\r\n            </Col>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CommentAdd","import React, { Component } from 'react'\r\nimport { ListGroup, ButtonToolbar, Button } from 'react-bootstrap'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nclass CommentItems extends Component {\r\n    static propTypes = {\r\n        comment: PropTypes.object.isRequired,\r\n        deleteComment:PropTypes.func.isRequired,\r\n        index:PropTypes.number.isRequired\r\n\r\n    }\r\n\r\n    handleClick = ()=> {\r\n        const {comment,deleteComment,index} = this.props\r\n        //notice\r\n        if (window.confirm(`confirm to delete ${comment.username} comments?`)){\r\n            deleteComment(index)\r\n        }\r\n    }\r\n    render() {\r\n        const {comment} = this.props\r\n        return (\r\n            <ListGroup>\r\n                <ListGroup.Item>\r\n                    <ButtonToolbar className=\"Button1\">\r\n                        <Button href=\"#\" onClick={this.handleClick}>Delete</Button>\r\n                    </ButtonToolbar>\r\n                    <p><span>{comment.username}</span> <span>said:</span></p>\r\n                    <p>{comment.content}</p>\r\n                </ListGroup.Item>\r\n            </ListGroup>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default CommentItems","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { ListGroup, Col } from 'react-bootstrap'\r\nimport \"./comment-list.css\"\r\nimport CommentItem from \"../Comment-items/comment-items\"\r\n\r\nclass CommentList extends Component {\r\n\r\n    static propTypes = {\r\n        comments:PropTypes.array.isRequired,\r\n        deleteComment:PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        const {comments,deleteComment} = this.props\r\n        const display = comments.length===0 ? 'block':'none'\r\n        return (\r\n            <Col>\r\n                <h3>Comment Reply</h3>\r\n                <h2 style={{display}}>No comments, please add comment</h2>\r\n                <ListGroup>\r\n                    {\r\n                        comments.map((comment,index)=>\r\n                        <CommentItem comment={comment} key={index} deleteComment={deleteComment} index={index}/>)\r\n                    }\r\n                </ListGroup>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CommentList\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.css'\r\nimport { Jumbotron, Container, Row, } from 'react-bootstrap'\r\nimport './app.css'\r\nimport CommentAdd from '../../components/comment-add/comment-add';\r\nimport CommentList from '../../components/comment-list/comment-list';\r\nimport {addComment, deleteComment} from '../../redux/actions'\r\n\r\nclass App extends Component {\r\n\r\n    static propsTypes = {\r\n        comments: PropTypes.array.isRequired,\r\n        addComment:PropTypes.func.isRequired,\r\n        deleteComment:PropTypes.func.isRequired\r\n    }\r\n    componentDidMount () {\r\n\r\n    }\r\n\r\n   \r\n    render() {\r\n        const {comments, addComment, deleteComment}=this.props\r\n        return (\r\n            <div>\r\n                <Jumbotron fluid>\r\n                    <Container className=\"Header\">\r\n                        <h1>React bootstrap</h1>\r\n                        <p>\r\n                            React comment Practice\r\n                        </p>\r\n                    </Container>\r\n                </Jumbotron>\r\n\r\n                <Container>\r\n                    <Row>\r\n                        <CommentAdd addComment={addComment}></CommentAdd>\r\n                        <CommentList comments={comments} deleteComment={deleteComment}></CommentList>\r\n                    </Row>\r\n                </Container>\r\n \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(\r\n    state => ({comments:state}),//state is the array of comment\r\n    {addComment, deleteComment}\r\n)(App)","/**\r\n * including all action creators\r\n */\r\nimport {ADD_COMMENT, DELETE_COMMENT} from './actions-types'\r\n//add comments\r\nexport const addComment = (comment) => ({\r\n    type: ADD_COMMENT, data: comment\r\n})\r\n\r\nexport const deleteComment = (index) => ({\r\n    type: DELETE_COMMENT, data: index\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nimport App from './containers/app/app'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}